{"ast":null,"code":"import React,{useState,useEffect,useRef}from\"react\";import\"./SpeechBubble.css\";// Import the CSS for styling\nimport{jsx as _jsx}from\"react/jsx-runtime\";const SpeechBubble=_ref=>{let{text}=_ref;const[displayText,setDisplayText]=useState(\"\");const textRef=useRef(\"\");// Animate the text letter by letter\nuseEffect(()=>{let i=0;setDisplayText(\"\");// Reset text display when text changes\ntextRef.current=\"\";// Reset the textRef when the input text changes\nconst interval=setInterval(()=>{if(i<text.length){textRef.current+=text.charAt(i);// Append each character\nsetDisplayText(textRef.current);// Update the displayText state\ni+=1;}if(i===text.length){clearInterval(interval);}},10);// Adjust the typing speed\nreturn()=>clearInterval(interval);// Cleanup the interval when component unmounts or changes\n},[text]);// Re-run the effect if the 'text' prop changes\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"speech-bubble\",children:/*#__PURE__*/_jsx(\"div\",{className:\"bubble\",children:/*#__PURE__*/_jsx(\"p\",{children:displayText})})});};export default SpeechBubble;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsx","_jsx","SpeechBubble","_ref","text","displayText","setDisplayText","textRef","i","current","interval","setInterval","length","charAt","clearInterval","className","children"],"sources":["C:/Users/johnn/Documents/Noshly/frontend/src/components/SpeechBubble.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./SpeechBubble.css\"; // Import the CSS for styling\r\n\r\nconst SpeechBubble = ({ text }) => {\r\n  const [displayText, setDisplayText] = useState(\"\");\r\n  const textRef = useRef(\"\");\r\n\r\n  // Animate the text letter by letter\r\n  useEffect(() => {\r\n    let i = 0;\r\n    setDisplayText(\"\"); // Reset text display when text changes\r\n    textRef.current = \"\"; // Reset the textRef when the input text changes\r\n\r\n    const interval = setInterval(() => {\r\n      if (i < text.length) {\r\n        textRef.current += text.charAt(i); // Append each character\r\n        setDisplayText(textRef.current); // Update the displayText state\r\n        i += 1;\r\n      }\r\n\r\n      if (i === text.length) {\r\n        clearInterval(interval);\r\n      }\r\n    }, 10); // Adjust the typing speed\r\n\r\n    return () => clearInterval(interval); // Cleanup the interval when component unmounts or changes\r\n  }, [text]); // Re-run the effect if the 'text' prop changes\r\n\r\n  return (\r\n    <div className=\"speech-bubble\">\r\n      <div className=\"bubble\">\r\n        <p>{displayText}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechBubble;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,oBAAoB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAE7B,KAAM,CAAAC,YAAY,CAAGC,IAAA,EAAc,IAAb,CAAEC,IAAK,CAAC,CAAAD,IAAA,CAC5B,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAAAU,OAAO,CAAGR,MAAM,CAAC,EAAE,CAAC,CAE1B;AACAD,SAAS,CAAC,IAAM,CACd,GAAI,CAAAU,CAAC,CAAG,CAAC,CACTF,cAAc,CAAC,EAAE,CAAC,CAAE;AACpBC,OAAO,CAACE,OAAO,CAAG,EAAE,CAAE;AAEtB,KAAM,CAAAC,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjC,GAAIH,CAAC,CAAGJ,IAAI,CAACQ,MAAM,CAAE,CACnBL,OAAO,CAACE,OAAO,EAAIL,IAAI,CAACS,MAAM,CAACL,CAAC,CAAC,CAAE;AACnCF,cAAc,CAACC,OAAO,CAACE,OAAO,CAAC,CAAE;AACjCD,CAAC,EAAI,CAAC,CACR,CAEA,GAAIA,CAAC,GAAKJ,IAAI,CAACQ,MAAM,CAAE,CACrBE,aAAa,CAACJ,QAAQ,CAAC,CACzB,CACF,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,MAAO,IAAMI,aAAa,CAACJ,QAAQ,CAAC,CAAE;AACxC,CAAC,CAAE,CAACN,IAAI,CAAC,CAAC,CAAE;AAEZ,mBACEH,IAAA,QAAKc,SAAS,CAAC,eAAe,CAAAC,QAAA,cAC5Bf,IAAA,QAAKc,SAAS,CAAC,QAAQ,CAAAC,QAAA,cACrBf,IAAA,MAAAe,QAAA,CAAIX,WAAW,CAAI,CAAC,CACjB,CAAC,CACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAH,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}