{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johnn\\\\Documents\\\\Noshly\\\\frontend\\\\src\\\\pages\\\\AdminPortal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Define baseURL dynamically\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = (() => {\n  const {\n    hostname\n  } = window.location;\n  if (hostname === \"127.0.0.1\" || hostname === \"localhost\") {\n    return \"http://127.0.0.1:5000\";\n  } else {\n    return \"https://noshly.onrender.com\";\n  }\n})();\nconst AdminPortal = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkAccess = async () => {\n      const token = localStorage.getItem(\"authToken\");\n      if (!token) {\n        // No token, redirect to login page\n        navigate(\"/login\");\n        return;\n      }\n      try {\n        // Decode the token to get user role\n        const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode JWT\n        const userRole = decodedToken.role;\n        if (userRole !== \"admin\") {\n          // If the user is not an admin, redirect to dashboard\n          navigate(\"/dashboard\");\n          return;\n        }\n\n        // Fetch data if the user is an admin\n        const response = await fetch(`${baseURL}/admin`, {\n          headers: {\n            \"Authorization\": `Bearer ${token}` // Send token in the request\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Unauthorized\"); // If not authorized, handle the error\n        }\n        const result = await response.json();\n        setData(result);\n      } catch (error) {\n        setError(\"You are not authorized to access this page.\");\n        navigate(\"/login\"); // Redirect to login if there's an error (invalid token)\n      }\n    };\n    checkAccess();\n  }, [navigate]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Admin Portal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(data, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminPortal, \"whjAF+7dkp7sXNp2oV2/9B3pLEo=\", false, function () {\n  return [useNavigate];\n});\n_c = AdminPortal;\nexport default AdminPortal;\nvar _c;\n$RefreshReg$(_c, \"AdminPortal\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","baseURL","hostname","window","location","AdminPortal","_s","data","setData","error","setError","navigate","checkAccess","token","localStorage","getItem","decodedToken","JSON","parse","atob","split","userRole","role","response","fetch","headers","ok","Error","result","json","children","fileName","_jsxFileName","lineNumber","columnNumber","stringify","_c","$RefreshReg$"],"sources":["C:/Users/johnn/Documents/Noshly/frontend/src/pages/AdminPortal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Define baseURL dynamically\r\nconst baseURL = (() => {\r\n  const { hostname } = window.location;\r\n  if (hostname === \"127.0.0.1\" || hostname === \"localhost\") {\r\n    return \"http://127.0.0.1:5000\";\r\n  } else {\r\n    return \"https://noshly.onrender.com\";\r\n  }\r\n})();\r\n\r\nconst AdminPortal = () => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const checkAccess = async () => {\r\n      const token = localStorage.getItem(\"authToken\");\r\n\r\n      if (!token) {\r\n        // No token, redirect to login page\r\n        navigate(\"/login\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Decode the token to get user role\r\n        const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode JWT\r\n        const userRole = decodedToken.role;\r\n\r\n        if (userRole !== \"admin\") {\r\n          // If the user is not an admin, redirect to dashboard\r\n          navigate(\"/dashboard\");\r\n          return;\r\n        }\r\n\r\n        // Fetch data if the user is an admin\r\n        const response = await fetch(`${baseURL}/admin`, {\r\n          headers: {\r\n            \"Authorization\": `Bearer ${token}`, // Send token in the request\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Unauthorized\"); // If not authorized, handle the error\r\n        }\r\n\r\n        const result = await response.json();\r\n        setData(result);\r\n      } catch (error) {\r\n        setError(\"You are not authorized to access this page.\");\r\n        navigate(\"/login\");  // Redirect to login if there's an error (invalid token)\r\n      }\r\n    };\r\n\r\n    checkAccess();\r\n  }, [navigate]);\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Admin Portal</h1>\r\n      <pre>{JSON.stringify(data, null, 2)}</pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminPortal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}